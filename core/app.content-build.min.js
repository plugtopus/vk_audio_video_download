var Base = function() {};
Base.extend = function(a, b) {
    var c = Base.prototype.extend;
    Base._prototyping = !0;
    var d = new this;
    c.call(d, a), d.base = function() {}, delete Base._prototyping;
    var e = d.constructor,
        f = d.constructor = function() {
            if (!Base._prototyping)
                if (this._constructing || this.constructor == f) this._constructing = !0, e.apply(this, arguments), delete this._constructing;
                else if (null != arguments[0]) return (arguments[0].extend || c).call(arguments[0], d)
        };
    return f.ancestor = this, f.extend = this.extend, f.forEach = this.forEach, f.implement = this.implement, f.prototype = d, f.toString = this.toString, f.valueOf = function(a) {
        return "object" == a ? f : e.valueOf()
    }, c.call(f, b), "function" == typeof f.init && f.init(), f
}, Base.prototype = {
    extend: function(a, b) {
        if (arguments.length > 1) {
            var c = this[a];
            if (c && "function" == typeof b && (!c.valueOf || c.valueOf() != b.valueOf()) && /\bbase\b/.test(b)) {
                var d = b.valueOf();
                b = function() {
                    var a = this.base || Base.prototype.base;
                    this.base = c;
                    var b = d.apply(this, arguments);
                    return this.base = a, b
                }, b.valueOf = function(a) {
                    return "object" == a ? b : d
                }, b.toString = Base.toString
            }
            this[a] = b
        } else if (a) {
            var e = Base.prototype.extend;
            Base._prototyping || "function" == typeof this || (e = this.extend || e);
            for (var f = {
                toSource: null
            }, g = ["constructor", "toString", "valueOf"], h = Base._prototyping ? 0 : 1; i = g[h++];) a[i] != f[i] && e.call(this, i, a[i]);
            for (var i in a) f[i] || e.call(this, i, a[i])
        }
        return this
    }
}, Base = Base.extend({
    constructor: function() {
        this.extend(arguments[0])
    }
}, {
    ancestor: Object,
    version: "1.1",
    forEach: function(a, b, c) {
        for (var d in a) void 0 === this.prototype[d] && b.call(c, a[d], d, a)
    },
    implement: function() {
        for (var a = 0; a < arguments.length; a++) "function" == typeof arguments[a] ? arguments[a](this.prototype) : this.prototype.extend(arguments[a]);
        return this
    },
    toString: function() {
        return String(this.valueOf())
    }
});;
Array.isArray = Array.isArray || function(obj) {
    return Object.prototype.toString.call(obj) === "[object Array]";
};

Array.makeArray = function(obj) {
    if (Object.isObject(obj))
        return [].slice.call(obj);
    if (Array.isArray(obj))
        return obj;
    return [obj];
};

Array.iterate = function(array, handler, context) {
    if (!array.length || !Functions.isFunction(handler))
        return array;
    var o = [];
    Object.isObject(context) && (handler = Functions.on(handler, context));
    for (var i = array.length; i--;) {
        var s = handler(array[i]);
        if (s === false) break;
        if (s === true) continue;
        s && o.push(s);
    }
    return o;
};;
var Functions = {
    isFunction: function(obj) {
        return "function" === typeof obj;
    },
    on: function(func, obj) {
        return function() {
            return func.apply(obj, arguments)
        }
    }
};;
Number.between = function(n, min, max) {
    return Math.min(Math.max(n, min), max) >> 0;
};

Number.isBetween = function(n, left, right) {
    return left < n && n < right;
};;
Object.isObject = function(obj) {
    var t = typeof obj;
    return t === "function" || t === "object" && !!obj;
};

Object.isEmpty = function(obj) {
    return !Object.keys(obj).length;
};

Object.each = function(obj, handler, context) {
    if (Object.isObject(obj) && Functions.isFunction(handler)) {
        for (var key in obj) {
            if (obj.hasOwnProperty(key)) {
                handler.call(context || obj, key, obj[key]);
            }
        }
    }
};

Object.union = function(a, b) {
    var o = {};
    for (var x in a) a.hasOwnProperty(x) && (o[x] = a[x]);
    for (var y in b) b.hasOwnProperty(y) && (o[y] = b[y]);
    return o;
};;
String.isString = function(target) {
    return typeof target === "string" || target instanceof String;
};

String.format = function(string, args) {
    var s = string;
    Array.makeArray(arguments).forEach(function(e, i) {
        var r = new RegExp("\\{" + i + "\\}", "g");
        s = s.replace(r, e == null ? "" : e);
    });
    return s;
};

String.contains = function(string1, string2) {
    return string1.toLowerCase().indexOf(string2.toLowerCase()) !== -1;
};

String.parseUrl = function(string) {
    try {
        return JSON.parse('{"' + decodeURIComponent(string.replace(/&/g, "\",\"").replace(/=/g, "\":\"")) + '"}');
    } catch (e) {
        return {};
    }
};

String.simplify = function(string) {
    return string.replace(/\s+/g, " ").trim();
};;
var App = Base.extend({
    constructor: function(global, chrome) {
        this.global = global;
        this.chrome = chrome;
    }
});;
App.Dom = Base.extend({
    constructor: function(dom, attributes) {
        this.dom = dom;
        this.factory = new App.Dom.Factory();

        if (Object.isObject(attributes))
            Object.each(attributes, this.setAttr, this);
    },
    on: function(event, handler, context) {
        Object.isObject(context) && (handler = Functions.on(handler, context));
        this.dom.addEventListener(event, handler, true);
    },
    off: function(event, handler) {
        this.dom.removeEventListener(event, handler);
    },
    clone: function(deep) {
        !arguments.length && (deep = true);
        var c = this.dom.cloneNode(deep);
        return this.factory.create(c);
    },
    setAttr: function(name, value) {
        this.dom.setAttribute(name, value);
        return this;
    },
    getAttr: function(name) {
        if (typeof this.dom[name] !== "undefined")
            return this.dom[name];
        return this.dom.getAttribute(name);
    },
    hasAttr: function(name) {
        return this.getAttr(name) != null;
    },
    getValue: function() {
        return this.dom.value || "";
    },
    getText: function() {
        return (this.dom.innerText || "").trim();
    },
    setText: function(text) {
        this.dom.innerText = (text || "").trim();
        return this;
    },
    getData: function(name) {
        return this.dom.dataset[name];
    },
    setData: function(name, value) {
        (value == null) && (value = true);
        this.dom.dataset[name] = value;
        return this;
    },
    hasData: function(name) {
        return this.dom.dataset.hasOwnProperty(name);
    },
    addClass: function(className) {
        if (this.dom.classList) {
            var s = this;
            var classArray = Array.isArray(className) ? className : className.split(" ");
            classArray.forEach(function(c) {
                s.dom.classList.add(c)
            })
        }
        return this;
    },
    removeClass: function(className) {
        if (this.dom.classList) {
            var s = this;
            var classArray = Array.isArray(className) ? className : className.split(" ");
            classArray.forEach(function(c) {
                s.dom.classList.remove(c)
            })
        }
        return this;
    },
    switchClass: function(removeClass, addClass) {
        if (this.dom.classList) {
            this.dom.classList.remove(removeClass);
            this.dom.classList.add(addClass);
        }
        return this;
    },
    switchClasses: function(removeClasses, addClasses) {
        this.removeClass(removeClasses);
        this.addClass(addClasses);
        return this;
    },
    hasClass: function(className) {
        return this.dom.classList && this.dom.classList.contains(className);
    },
    find: function(selector) {
        var c = this.dom.querySelector(selector);
        return c ? this.factory.create(c) : null;
    },
    findAll: function(selector) {
        var c = this.dom.querySelectorAll(selector);
        return Array.iterate(Array.makeArray(c), function(item) {
            return this.factory.create(item);
        }, this);
    },
    has: function(element) {
        var e = element instanceof App.Dom ? element.dom : element;
        return this.dom.contains(e);
    },
    contains: function(selector) {
        return this.dom.querySelector(selector) !== null;
    },
    appendChild: function(node, toEnd) {
        if (node instanceof App.Dom) {
            if (toEnd) {
                this.dom.appendChild(node.dom);
            } else {
                this.dom.insertBefore(node.dom, this.dom.firstChild)
            }
        } else {
            if (toEnd) {
                this.dom.appendChild(node);
            } else {
                this.dom.insertBefore(node, this.dom.firstChild)
            }
        }
        return this;
    },
    insertAfter: function(node) {
        this.dom.parentNode.insertBefore(node.dom, this.dom.nextSibling);
    },
    insertBefore: function(node) {
        this.dom.parentNode.insertBefore(node.dom, this.dom);
    },
    parent: function() {
        return this.factory.create(this.dom.parentNode);
    },
    next: function() {
        return this.factory.create(this.dom.nextSibling);
    }
}, {
    Factory: Base.extend({
        create: function(node, attributes) {
            if (node instanceof App.Dom)
                return node;
            if (!String.isString(node) && !this._isHtmlElement(node))
                return null;

            return new App.Dom(node, attributes);
        },
        createFragment: function() {
            return new App.Dom(document.createDocumentFragment());
        },
        _isHtmlElement: function(e) {
            return e && (e instanceof HTMLElement && e.nodeType === 1 || e instanceof HTMLDocument || e instanceof DocumentFragment);
        }
    })
});;
App.Ajax = function() {};
App.Ajax.prototype = {
    defaults: {
        async: true,
        type: "GET",
        responseType: "json"
    },
    send: function(data) {
        var config = Object.union(this.defaults, data);
        var httpRequest = new XMLHttpRequest();
        httpRequest.responseType = config.responseType;
        httpRequest.onload = config.onload || function() {};
        httpRequest.onerror = config.onerror || function() {};
        httpRequest.onprogress = config.onprogress || function() {};
        httpRequest.onloadstart = config.onloadstart || function() {};
        httpRequest.onreadystatechange = config.onreadystatechange || function() {};
        httpRequest.open(config.type, config.url, config.async);
        httpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        httpRequest.send(config.content);
    }
};;
App.Language = App.extend({
    languages: {
        ru: "ru"
    },
    constructor: function(global) {
        this.domFactory = new App.Dom.Factory();
        this.document = this.domFactory.create(global.document);
        this.markerNode = this.document.find("#myprofile");
        if (!this.markerNode) {
            this.markerNode = this.document.find("#l_pr");
        }
        this.language = this._getInterfaceLanguage();
    },
    getString: function(branch, name) {
        return this.strings[branch][name][this.language] || "";
    },
    _getInterfaceLanguage: function() {
        var text = this.markerNode ? this.markerNode.getText() : "";
        var marker = this.strings.marker;
        return this.languages.ru;
    }
});

App.Language.prototype.strings = {
    marker: {
        ru: "Моя Страница"
    }
};

App.Language.prototype.strings.audio = {
    download: {
        ru: "Скачать {0}kbps"
    }
};

App.Language.prototype.strings.photo = {
    download: {
        ru: "Скачать оригинал"
    }
};

App.Language.prototype.strings.video = {
    download: {
        ru: "Скачать"
    }
};;
App.Observer = Base.extend({
    defaults: {
        childList: false,
        attributes: false,
        characterData: false,
        subtree: false,
        attributeOldValue: false,
        characterDataOldValue: false,
        target: null,
        callback: function() {}
    },
    constructor: function() {
        this.config = {};
        this.observer = null;
    },
    configure: function(options) {
        this.config = Object.union(this.defaults, options);
        this.observer = this._getObserverInstance(this.config.callback);
    },
    start: function() {
        if (this.config.target !== null)
            this.observer.observe(this.config.target, this.config);
    },
    stop: function() {
        this.observer && this.observer.disconnect();
    },
    destroy: function() {
        this.stop();
        this.observer = null;
        this.config = {};
    },
    _getObserverInstance: function(callback) {
        if (window.MutationObserver != null)
            return new MutationObserver(callback);
        return new WebKitMutationObserver(callback);
    }
});;
App.Template = {
    audio: "(this.title='')||window.showTooltip&&!showTooltip(this,{text:'{0}',showdt:0,black:1,shift:[10,5,0]})||(this.title='{0}')",
    video: function(text) {
        var domFactory = new App.Dom.Factory();

        var wrap = domFactory.create(document.createElement("div"));

        var idd_selected_value = domFactory.create(document.createElement("div"), {
            "class": "idd_selected_value idd_arrow"
        });
        idd_selected_value.setText(text);
        wrap.appendChild(idd_selected_value, true);

        var idd_popup = domFactory.create(document.createElement("div"), {
            "class": "idd_popup"
        });
        var idd_header_wrap = domFactory.create(document.createElement("div"), {
            "class": "idd_header_wrap"
        });
        var idd_header = domFactory.create(document.createElement("div"), {
            "class": "idd_header idd_arrow"
        });
        idd_header.setText(text);
        idd_header_wrap.appendChild(idd_header, true);

        var idd_items_wrap = domFactory.create(document.createElement("div"), {
            "class": "idd_items_wrap"
        });
        var idd_items_content = domFactory.create(document.createElement("div"), {
            "class": "idd_items_content"
        });
        [240, 360, 480, 720, 1080].forEach(function(el) {
            var idd_item = domFactory.create(document.createElement("div"), {
                "class": "idd_item m-" + el,
                "data-resolution": el
            });
            idd_item.setText(el.toString());
            idd_items_content.appendChild(idd_item, true);
        });
        idd_items_wrap.appendChild(idd_items_content, true);

        idd_popup.appendChild(idd_header_wrap, true);
        idd_popup.appendChild(idd_items_wrap, true);

        wrap.appendChild(idd_selected_value, true);
        wrap.appendChild(idd_popup, true);

        return wrap;
    }
};;
App.Content = App.extend({
    constructor: function(global, chrome) {
        this.base(global, chrome);
        this.cache = {};
        this.ajax = new App.Ajax();
        this.language = new App.Language(global);
        this.template = App.Template;
        this.domFactory = new App.Dom.Factory();
        this.document = this.domFactory.create(global.document);
        this.body = this.domFactory.create(global.document.body);
    },
    _sendMessage: function(action, data) {
        if (action && Object.isObject(data))
            this.chrome.runtime.sendMessage({
                action: action,
                data: data
            });
    },
    _getString: function(branch, stringName) {
        return this.language.getString(branch, stringName);
    },
    _prepareFileName: function(string) {
        return String.simplify(string.replace(/[\\\/:\?\*<>\|]+/g, " ")) || "Untitled";
    }
}, {
    Audio: null,
    Photo: null,
    Video: null,
    Bootstrap: function(global, chrome) {
        App.Content.Audio.Instance = new App.Content.Audio(global, chrome);
        App.Content.Photo.Instance = new App.Content.Photo(global, chrome);
        App.Content.Video.Instance = new App.Content.Video(global, chrome);
    },
    Destroy: function() {
        App.Content.Audio && App.Content.Audio.Instance.destructor();
        App.Content.Photo && App.Content.Photo.Instance.destructor();
        App.Content.Video && App.Content.Video.Instance.destructor();
    }
});;
App.Content.Audio = App.Content.extend({
    selector: {
        area: ".area.clear_fix",
        newArea: ".audio_row:not(.vkvm-area)"
    },
    css: {
        area: "vkvm-area",
        clear: "clear_fix"
    },
    constructor: function(global, chrome) {
        this.base(global, chrome);
        this.observer = null;

        this._start();
        this._startObserver();
    },
    destructor: function() {
        this.observer && this.observer.destroy();
    },
    _start: function() {
        this._updateContent();
    },
    _startObserver: function() {
        var options = {
            childList: true,
            subtree: true,
            target: this.body.dom,
            callback: Functions.on(this._updateContent, this)
        };
        update_user_vk_id();
        this.observer = new App.Observer();
        this.observer.configure(options);
        this.observer.start();
    },
    _updateContent: function() {
        var audioRows = this.body.findAll(this.selector.area);
        var newAudioRows = this.body.findAll(this.selector.newArea);
        Array.iterate(audioRows, this._injectElements, this);
        Array.iterate(newAudioRows, this._injectElementsNew, this);
    },
    _injectElements: function(rowNode) {
        var inputNode = rowNode.addClass(this.css.area).find("input");
        if (!inputNode) return;

        var trackId = this._getTrackId(inputNode);
        var trackInstance = this._getTrack(trackId);
        trackInstance.injectElements(rowNode);
    },
    _injectElementsNew: function(rowNode) {
        rowNode.addClass(this.css.area);
        var trackId = this._getTrackIdNew(rowNode);
        var trackInstance = this._getTrack(trackId, true);
        trackInstance.injectElements(rowNode);
    },
    _getTrackId: function(inputNode) {
        return inputNode.getAttr("id").replace(/^\D+|\D+$/g, "");
    },
    _getTrackIdNew: function(inputNode) {
        return inputNode.getAttr("data-full-id");
    },
    _getTrack: function(id, isNew) {
        if (!this.cache[id])
            this.cache[id] = this._createTrack(id, isNew);
        return this.cache[id];
    },
    _createTrack: function(id, isNew) {
        return new App.Content.Audio.Track(this.global, this.chrome, id, isNew);
    }
});;
App.Content.Audio.Track = App.Content.extend({
    constructor: function(global, chrome, id, isNew) {
        this.base(global, chrome);

        this.trackId = id;
        this.isNew = isNew;
        this.url = null;
        this.text = null;
        this.wrap = null;
        this.length = null;
        this.button = null;
        this.bitrate = null;
        this.bitrateCss = null;
    },
    injectElements: function(wrapNode) {
        this.wrap = wrapNode;
        if (!this.params || !this.params[2]) {
            this.params = JSON.parse(wrapNode.getAttr("data-audio"));
        }
        this.url = !this.isNew ? wrapNode.find("input").getValue() : this.params[2];
        if (!this.url) {
            this.url = this.params[1] + '_' + this.params[0];
        }

        if (this.isNew) {
            if (this.wrap.dom.parentNode.classList.contains('choose_row')) {
                var par = this.wrap.dom.parentNode;
                par.style.overflow = 'visible';
                par.style.width = '494px';
            }
            var duration = this.wrap.dom.querySelector('.audio_row__duration'),
                acts = this.wrap.dom.querySelector('._audio_row__actions'),
                bitrate_timeout,
                moveButton_timeout,
                intervalTimer;
            this.wrap.dom.addEventListener("mouseenter", (function(track) {
                return function() {

                    if (intervalTimer) {
                        clearInterval(intervalTimer);
                    }
                    intervalTimer = setInterval(moveButton.bind(this), 100);

                    function moveButton() {
                        var acts = track.wrap.dom.querySelector('._audio_row__actions');
                        var button = acts ? acts.querySelector('.vkvm-button-download') : null;
                        if (acts && !button) {
                            track._appendButtonToActs();
                            track._appendQuality();
                            if (!this.classList.contains('bitrated')) {
                                if (!global_request_flag) {
                                    track.__getBitrate();
                                    global_request_flag = true;
                                    setTimeout(function() {
                                        global_request_flag = false
                                    }, 1000);
                                } else {
                                    if (bitrate_timeout) {
                                        clearTimeout(bitrate_timeout);
                                    }
                                    bitrate_timeout = setTimeout(function() {
                                        track.__getBitrate();
                                    }, 1000);
                                }
                            }
                        }
                    }

                    moveButton.apply(this);
                }
            })(this), false);

            this.wrap.dom.addEventListener("mouseleave", (function(track) {
                return function() {
                    if (moveButton_timeout) {
                        clearTimeout(moveButton_timeout);
                    }
                    if (intervalTimer) {
                        clearInterval(intervalTimer);
                    }
                }
            })(this), false);
        }

        this._appendButton(), this._appendQuality();

        return !(this.isNew && !this.url);
    },
    _sendDownloadMessage: function(trackUrl, trackTitle) {
        var data = {
            url: trackUrl,
            type: "audio",
            filename: trackTitle + ".mp3"
        };
        this._sendMessage("download", data);
    },
    _appendButton: function() {
        var buttonNode = this._getButton();
        buttonNode.on("click", function(e) {
            e.preventDefault();
            e.stopPropagation();
            var trackName = this._getName();
            this._sendDownloadMessage(this.url, trackName);
        }, this);

        var targetNode = this.wrap.find(!this.isNew ? this.selector.actions : this.selector.actionsNew);
        targetNode = this.wrap.find('.audio_row__inner');
        targetNode.appendChild(buttonNode, !this.isNew);
        if (this.isNew) {
            buttonNode instanceof App.Dom ? (buttonNode.dom.style.float = 'left', buttonNode.dom.style.visibility = 'visible', buttonNode.dom.style.display = 'none') : (buttonNode.style.float = 'left', buttonNode.style.visibility = 'visible', buttonNode.style.display = 'none');
        }
    },
    _appendButtonToActs: function() {
        var targetNode = this.wrap.find('._audio_row__actions');
        if (!targetNode.dom.querySelector('.vkvm-button-download')) {
            var buttonNode = this.__createButton();
            this.button = buttonNode;
            var _this = this;
            buttonNode.on("click", function(e) {
                e.preventDefault();
                e.stopPropagation();
                if (this.url.indexOf('http') != 0) {
                    _this.download_after_getting_url = true;
                    return;
                }
                var trackName = this._getName();
                this._sendDownloadMessage(this.url, trackName);
            }, this);
            targetNode.appendChild(buttonNode, !this.isNew);
            if (this.isNew) {
                buttonNode instanceof App.Dom ? (buttonNode.dom.style.float = 'left', buttonNode.dom.style.visibility = 'visible', buttonNode.dom.style.display = 'inline-block') : (buttonNode.style.float = 'left', buttonNode.style.visibility = 'visible', buttonNode.style.display = 'inline-block');
            }
        }
    },
    _appendQuality: function() {
        if (this.text === null || this.bitrateCss === null) {
            this.__defineQuality();
        } else {
            this._setWrapClass(this.bitrateCss);
            this._setButtonHover(this.text);
        }
    },
    __defineQuality: function() {
        if (this.url && this.url.indexOf('http') === 0) {
            var self = this;
            var queryConfig = {
                url: this.url,
                type: "HEAD",
                onload: function() {
                    self.__onHeadersReceived.call(self, this);
                },
                onerror: function() {
                    self.wrap.dom.classList.remove('bitrated');
                }
            };
            this.ajax.send(queryConfig);
        } else if (!this.isNew) {
            var btn = this.wrap.dom.querySelector('.vkvm-button-download');
            if (btn) {
                btn.remove();
            }
        }
    },
    __getBitrate: function() {
        if (audio_url_cache.has(this.trackId)) {
            this.url = audio_url_cache.get(this.trackId);
            this.__defineQuality();
        } else {
            var tracks = this.trackId;
            var next_track = this.wrap.dom.nextSibling;
            for (var i = 0; i < 3 && next_track;) {
                if (next_track.classList && !next_track.classList.contains('bitrated')) {
                    i++;
                    var id = JSON.parse(next_track.getAttribute("data-audio"));
                    if (id) {
                        tracks += ',' + id[1] + '_' + id[0];
                        next_track.classList.add('bitrated');
                    }
                }
                next_track = next_track.nextSibling;
            }
            this.wrap.dom.classList.add('bitrated');
            (!window.vk || !window.vk.id) && update_user_vk_id();
            var _this = this;
            this.ajax.send({
                url: "https://vk.com/al_audio.php",
                type: "POST",
                responseType: "",
                content: "act=reload_audio&al=1&ids=" + tracks,
                onload: function() {
                    var res = this.response.match(/\[.*\]/);
                    var ids = tracks.split(',');

                    if (res) {
                        res = JSON.parse(res);
                        for (var i = 0; i < res.length; i++) {
                            var id = res[i][1] + '_' + res[i][0];
                            var ind = ids.indexOf(id);
                            if (ind >= 0) {
                                ids.splice(ind, 1);
                            }
                            decode_audio_url(id, res[i][2], function(id, decoded_url) {
                                audio_url_cache.add(id, decoded_url);
                                var __this = App.Content.Audio.Instance._getTrack(id);
                                __this.url = audio_url_cache.get(id);
                                if (__this.download_after_getting_url) {
                                    __this._sendDownloadMessage(__this.url, __this._getName());
                                    __this.download_after_getting_url = false;
                                }

                                if (!__this.wrap.dom.querySelector('.vkvm-button-download')) {
                                }
                                __this.__defineQuality();
                            });
                        }
                    }

                    for (var i = 0, l = ids.length; i < l; i++) {
                        if (ids[i] != '') {
                            var __this = App.Content.Audio.Instance._getTrack(ids[i]);
                            __this.wrap.dom.classList.remove('bitrated');
                            var btn = __this.wrap.dom.querySelector('.vkvm-button-download');
                            if (btn) {
                                btn.remove();
                            }
                        }
                    }
                }
            });
        }
    },
    __onHeadersReceived: function(xhr) {
        var trackSize = xhr.getResponseHeader("content-length") >> 0;
        var trackLength = !this.isNew ? this._getLength() : this.params[5];
        var trackBitrate = this._getBitrate(trackSize, trackLength);
        this.text = this._getFormattedText(trackBitrate);
        this.bitrateCss = this._getBitrateCss(trackBitrate);

        this._setWrapClass(this.bitrateCss);
        this._setButtonHover(this.text);
    },
    _getName: function() {
        var bandName = this.wrap.find(!this.isNew ? this.selector.band : this.selector.band_new).getText();
        var songName = this.wrap.find(!this.isNew ? this.selector.title : this.selector.title_new).getText();
        var fullName = [bandName, songName].join(" – ");
        return this._prepareFileName(fullName);
    },
    _getLength: function() {
        if (this.length === null)
            this.length = this.url.match(/\d+$/) >> 0;
        return this.length;
    },
    _getFormattedText: function(bitrate) {
        if (this.text === null)
            this.text = this._getString("audio", "download");
        return String.format(this.text, bitrate);
    },
    _getBitrate: function(byteSize, secLength) {
        if (this.bitrate === null)
            this.bitrate = this.__defineBitrate(byteSize, secLength);
        return this.bitrate;
    },
    __defineBitrate: function(byteSize, secLength) {
        var bitrateMin = this.settings.bitrate.min;
        var bitrateMax = this.settings.bitrate.max;
        var bitrate = (byteSize / secLength / 125) >> 0;
        switch (true) {
            case Number.isBetween(bitrate, bitrateMin, bitrateMin + 10):
                return bitrateMin;
            case Number.isBetween(bitrate, bitrateMax - 10, bitrateMax):
                return bitrateMax;
            default:
                return Number.between(bitrate, bitrateMin, bitrateMax);
        }
    },
    _getBitrateCss: function(bitrate) {
        if (this.bitrateCss === null)
            this.bitrateCss = this.__defineBitrateCss(bitrate);
        return this.bitrateCss;
    },
    __defineBitrateCss: function(bitrate) {
        switch (true) {
            case bitrate < this.settings.bitrate.low:
                return this.css.bitrate.lowest;
            case bitrate < this.settings.bitrate.average:
                return this.css.bitrate.low;
            case bitrate < this.settings.bitrate.high:
                return this.css.bitrate.average;
            default:
                return this.css.bitrate.high;
        }
    },
    _getButton: function() {
        if (this.button === null)
            return this.button = this.__createButton();
        return this.button = this.button.clone();
    },
    __createButton: function() {
        return this.domFactory.create(document.createElement("a"), {
            "class": this.css.button,
            href: "#"
        });
    },
    _setWrapClass: function(css) {
        this.wrap.addClass(css);
    },
    _setButtonHover: function(text) {
        this.button.setAttr("onmouseenter", String.format(this.template.audio, text));
    }
});

App.Content.Audio.Track.prototype.extend({
    css: {
        button: "vkvm-button-download audio_edit_wrap",
        bitrate: {
            high: "vkvm-bitrate-high",
            average: "vkvm-bitrate-average",
            low: "vkvm-bitrate-low",
            lowest: "vkvm-bitrate-lowest"
        }
    },
    selector: {
        band: "b",
        band_new: ".audio_row__performer",
        title: ".title",
        title_new: ".audio_row__title_inner",
        button: ".vkvm-button-download",
        actions: ".actions",
        actionsNew: "._audio_row__actions"
    },
    settings: {
        bitrate: {
            min: 70,
            low: 170,
            average: 220,
            high: 280,
            max: 320
        }
    }
});;
App.Content.Photo = App.Content.extend({
    selector: {
        layer: "#layer_wrap",
        original: "#pv_open_original",
        originalNew: "#pv_more_act_download"
    },
    constructor: function(global, chrome) {
        this.base(global, chrome);
        this.layer = this.body.find(this.selector.layer);
        this.observer = null;

        this.layer && this._startObserver();
    },
    destructor: function() {
        this.observer && this.observer.destroy();
    },
    _startObserver: function() {
        var options = {
            childList: true,
            subtree: true,
            target: this.layer.dom,
            callback: Functions.on(this._updateCurrentContent, this)
        };
        this.observer = new App.Observer();
        this.observer.configure(options);
        this.observer.start();
    },
    _sendDownloadMessage: function(photoUrl, photoName) {
        var data = {
            url: photoUrl,
            type: "photo",
            filename: photoName
        };
        this._sendMessage("download", data);
    },
    _updateCurrentContent: function() {
        var targetNode = this.layer.find(this.selector.original);

        if (!targetNode) {
            targetNode = this.layer.find(this.selector.originalNew);
            this.isNew = true;
        }

        if (!targetNode || targetNode.hasData("vkvm")) return;

        var photoUrl = targetNode.setData("vkvm").getAttr("href");
        var photoName = window.location.pathname.match(/^\/photo([\d-_]+)/) || window.location.search.match(/(?:\?|&)z=photo([\d-_]+)/);
        if (photoName && photoName.length > 1) {
            photoName = photoName[1] + '.' + (photoUrl.match(/[^\.]+$/g) || ["jpg"])[0];
        }
        if (!photoName) {
            photoName = (photoUrl.match(/[^\\//]+$/g) || ["Photo"])[0];
        }
        var anchorNode = this._getAnchor();
        if (this.isNew) {
            anchorNode.setAttr("class", "pv_more_act_item");
            anchorNode.setAttr("id", "pv_more_act_download");
        }
        anchorNode.on("click", Functions.on(function(e) {
            e.stopPropagation();
            e.preventDefault();
            this._sendDownloadMessage(photoUrl, photoName);
        }, this));

        targetNode.insertAfter(anchorNode);
    },
    _getAnchor: function() {
        if (!this.cache.anchor)
            this.cache.anchor = this.__createAnchor();
        return this.cache.anchor.clone();
    },
    __createAnchor: function() {
        var text = this._getString("photo", "download");
        return this.domFactory.create(document.createElement("a"), {
            href: "#"
        }).setText(text);
    }
});;
App.Content.Video = App.Content.extend({
    selector: {
        layer: "#mv_layer",
        flash: "embed",
        title: "#mv_title",
        more: "#mv_more"
    },
    css: {
        button: "vkvm-download-video idd_wrap mv_more fl_l",
        resolution: {
            all: "vkvm-resolution-240 vkvm-resolution-360 vkvm-resolution-480 vkvm-resolution-720 vkvm-resolution-1080",
            240: "vkvm-resolution-240",
            360: "vkvm-resolution-360",
            480: "vkvm-resolution-480",
            720: "vkvm-resolution-720",
            1080: "vkvm-resolution-1080"
        }
    },
    constructor: function(global, chrome) {
        this.base(global, chrome);
        this.layer = null;
        this.observers = {
            body: new App.Observer(),
            layer: new App.Observer()
        };

        this._start();
    },
    destructor: function() {
        this.observers.body && this.observers.body.destroy();
        this.observers.layer && this.observers.layer.destroy();
    },
    _start: function() {
        this.layer = this.body.find(this.selector.layer);
        if (this.layer === null)
            return this._startBodyObserver();
        this._updateContent();
        this._startLayerObserver();
    },
    _startBodyObserver: function() {
        var options = {
            childList: true,
            target: this.body.dom,
            callback: Functions.on(this._trackLayer, this)
        };
        this.observers.body.configure(options);
        this.observers.body.start();
    },
    _startLayerObserver: function() {
        var options = {
            childList: true,
            subtree: true,
            target: this.layer.dom,
            callback: Functions.on(this._updateContent, this)
        };
        this.observers.layer.configure(options);
        this.observers.layer.start();
    },
    _trackLayer: function() {
        this.layer = this.body.find(this.selector.layer);
        if (this.layer === null) return;

        this.observers.body.destroy();
        this._startLayerObserver();
    },
    _updateContent: function() {
        this.youtube = this.layer.find('iframe#video_yt_player');
        if (this.youtube) {
            return;
        }

        this.flash = this.layer.find(this.selector.flash);
        if (!this.flash) {
            var _window = retrieve_window_variables([{
                var_name: "mvcur.player.vars",
                var_value: "(window.mvcur.player || window.html5video).getVars()"
            }]);
            this.html5vars = _window["mvcur.player.vars"];

            if (!this.html5vars) {
                return;
            }
        }

        this.more && this.layer.has(this.more) || (this.more = this.layer.find(this.selector.more), this.more && !this.more.hasData("vkvm") && (this.title = this.layer.find(this.selector.title), this.title && this._appendButton()))
    },
    _addVideosFromHtml5Vars: function() {
        var videos = {};
        if (this.html5vars) {
            var vars = this.html5vars;
            var resArray = ["240", "360", "480", "720", "1080"];
            for (i = 0, l = resArray.length; i < l; i++) {
                var res = resArray[i];
                if (vars['url' + res]) {
                    videos[res] = vars['url' + res];
                }
            }
        }
        return videos;
    },
    _sendDownloadMessage: function(videoUrl, videoTitle) {
        var data = {
            url: videoUrl,
            type: "video",
            filename: videoTitle + ".mp4"
        }
        this._sendMessage("download", data);
    },
    _appendButton: function() {
        this.more.setData("vkvm");

        var videoConfig;
        var videoResolutions

        if (this.flash) {
            videoConfig = this._getVideoConfig();
            videoResolutions = this._getVideoResolutions(videoConfig);
        } else {
            videoResolutions = this._addVideosFromHtml5Vars();
        }

        if (Object.isEmpty(videoResolutions))
            return;

        var buttonClasses = this._getButtonCss(videoResolutions);
        var buttonNode = this._getButton(buttonClasses);
        buttonNode.on("click", Functions.on(function(e) {
            e.stopPropagation();
            e.preventDefault();
            var target = this.domFactory.create(e.target);
            var targetResolution = target.getData("resolution");
            var videoTitle = this._getVideoTitle();
            var videoUrl = videoResolutions[targetResolution];
            this._sendDownloadMessage(videoUrl, videoTitle);
        }, this));

        this.more.insertBefore(buttonNode);
    },
    _getVideoConfig: function() {
        var videoOptions = this.flash.getAttr("flashvars") || "";
        return String.parseUrl(videoOptions);
    },
    _getVideoTitle: function() {
        return this._prepareFileName(this.title.getText());
    },
    _getVideoResolutions: function(config) {
        var resolutions = {};
        if ((config["extra_data"] || "").endsWith("mp4"))
            resolutions["240"] = config["extra_data"];
        config["url240"] && (resolutions["240"] = config["url240"]);
        config["url360"] && (resolutions["360"] = config["url360"]);
        config["url480"] && (resolutions["480"] = config["url480"]);
        config["url720"] && (resolutions["720"] = config["url720"]);
        config["url1080"] && (resolutions["1080"] = config["url1080"]);
        return resolutions;
    },
    _getButton: function(cssClasses) {
        if (!this.cache.button)
            this.cache.button = this.__createButton();
        return this.cache.button.clone().switchClasses(this.css.resolution.all, cssClasses);
    },
    __createButton: function() {
        var text = this._getString("video", "download");
        var btn_dom = this.template.video(text);
        btn_dom.addClass(this.css.button);
        return btn_dom;
    },
    _getButtonCss: function(videoResolutions) {
        var handler = function(e) {
            return this.css.resolution[e]
        };
        return Array.iterate(Object.keys(videoResolutions), Functions.on(handler, this));
    }
});;
var global_request_flag = false;
var audio_url_cache = {
    data: {},

    init: function() {
        chrome.storage.local.get('audio_url_cache', function(result) {
            audio_url_cache.data = result;
        });
    },

    has: function(id) {
        return this.data[id] != undefined;
    },

    add: function(id, href) {
        this.data[id] = href;
        chrome.storage.local.set({
            'audio_url_cache': this.data
        });
    },

    get: function(id) {
        return this.data[id];
    }
};

var retrieve_window_variables = function(variables) {
    var ret = {};

    var scriptContent = "";
    for (var i = 0; i < variables.length; i++) {
        scriptContent += "var tmp = undefined; try {tmp = " + variables[i].var_value + "}catch(e){tmp = undefined;} if (typeof tmp !== 'undefined') { document.body.setAttribute('tmp_" + variables[i].var_name + "', JSON.stringify(tmp));} else { document.body.removeAttribute('tmp_" + variables[i].var_name + "');}\n"
    }

    var script = document.createElement('script');
    script.id = 'tmpScript';
    script.appendChild(document.createTextNode(scriptContent));
    (document.body || document.head || document.documentElement).appendChild(script);

    for (var i = 0; i < variables.length; i++) {
        var currVariable = variables[i].var_name;
        ret[currVariable] = JSON.parse(document.body.getAttribute("tmp_" + currVariable));
        document.body.removeAttribute("tmp_" + currVariable);
    }

    script.remove();

    return ret;
}

var update_user_vk_id = function() {
    var _window = retrieve_window_variables([{
        var_name: "vk",
        var_value: "window.vk"
    }]);
    window.vk = _window["vk"];
}

var audio_url_decoder = function() {
    var decoder;
    var loading = false;

    function get_audio_url_decoder() {

        function GetVKAudioDecoder(e) {
            "use strict";

            function i() {
                return window.wbopen && ~(window.open + "").indexOf("wbopen")
            }

            function o(t) {
                if (!i() && ~t.indexOf("audio_api_unavailable")) {
                    var e = t.split("?extra=")[1].split("#"),
                        o = "" === e[1] ? "" : a(e[1]);
                    if (e = a(e[0]),
                        "string" != typeof o || !e)
                        return t;
                    o = o ? o.split(String.fromCharCode(9)) : [];
                    for (var s, r, n = o.length; n--;) {
                        if (r = o[n].split(String.fromCharCode(11)),
                                s = r.splice(0, 1, e)[0], !l[s])
                            return t;
                        e = l[s].apply(null, r)
                    }
                    if (e && "http" === e.substr(0, 4))
                        return e
                }
                return t
            }

            function a(t) {
                if (!t || t.length % 4 == 1)
                    return !1;
                for (var e, i, o = 0, a = 0, s = ""; i = t.charAt(a++);)
                    i = r.indexOf(i), ~i && (e = o % 4 ? 64 * e + i : i,
                    o++ % 4) && (s += String.fromCharCode(255 & e >> (-2 * o & 6)));
                return s
            }

            function s(t, e) {
                var i = t.length,
                    o = [];
                if (i) {
                    var a = i;
                    for (e = Math.abs(e); a--;)
                        e = (i * (a + 1) ^ e + a) % i,
                            o[a] = e
                }
                return o
            }
            Object.defineProperty(e, "__esModule", {
                value: !0
            }),
                e.audioUnmaskSource = o;
            var r = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMN0PQRSTUVWXYZO123456789+/=",
                l = {
                    v: function(t) {
                        return t.split("").reverse().join("")
                    },
                    r: function(t, e) {
                        t = t.split("");
                        for (var i, o = r + r, a = t.length; a--;)
                            i = o.indexOf(t[a]), ~i && (t[a] = o.substr(i - e, 1));
                        return t.join("")
                    },
                    s: function(t, e) {
                        var i = t.length;
                        if (i) {
                            var o = s(t, e),
                                a = 0;
                            for (t = t.split(""); ++a < i;)
                                t[a] = t.splice(o[i - 1 - a], 1, t[a])[0];
                            t = t.join("")
                        }
                        return t
                    },
                    i: function(t, e) {
                        return l.s(t, e ^ window.vk.id)
                    },
                    x: function(t, e) {
                        var i = [];
                        return e = e.charCodeAt(0),
                            each(t.split(""), function(t, o) {
                                i.push(String.fromCharCode(o.charCodeAt(0) ^ e))
                            }),
                            i.join("")
                    }
                }
        }
        var obj = {};
        GetVKAudioDecoder(obj);
        decoder = obj.audioUnmaskSource;
    }
    if (!decoder) {
        get_audio_url_decoder();
    }

    return function decode(id, encoded_url, callback) {
        if (decoder) {
            callback(id, decoder(encoded_url));
            return;
        } else if (!loading) {
            get_audio_url_decoder();
        }
        setTimeout(function() {
            decode(id, encoded_url, callback);
        }, 500);
    }
}
var decode_audio_url = new audio_url_decoder();

audio_url_cache.init();

App.Content.Bootstrap(window, chrome);
window.onbeforeunload = App.Content.Destroy;